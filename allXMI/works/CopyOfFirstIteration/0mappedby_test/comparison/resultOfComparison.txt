Text Compare
Produced: 2024-03-19 10:18:52

Mode:  Differences
Left file: F:\Gabriel\github_desktop\ModelTransformationWithLLMs\allXMI\works\0mappedby_test\oracle\combinedOracle\cleanOracle.java
Right file: F:\Gabriel\github_desktop\ModelTransformationWithLLMs\allXMI\works\0mappedby_test\gpt\gptoutput\cleanGPT.java
-------------------------------------------------------------------------------------------
                                                            <>     public Job jobAssigne;
                                                                   public Job jobAFaire;
    public String Attribute;                                       public Object Attribute;

    public List<Job> jobAssigne = new ArrayList<Job>();

    public List<Job> jobAFaire = new ArrayList<Job>();
>>>>>>>>>>
Order of variables is different, according to the XMI the order should be: jobAssigne, jobAFaire, Attribute --> GPT followed the order, GPT is correct.
Attribute has a different return type, String in Oracle, Object in GPT --> In the XMI the type is never specified, GPT is not wrong. The original XMI had String mentioned.
The Oracle created lists of Jobs, while GPT created variables --> upper value in XMI is "*", should indicate list. fault of GPT.
-------------------------------------------------------------------------------------------
    public String Attribute;                                <>     public Object Attribute;
>>>>>>>>>
The return type is different, Oracle: String, GPT: Object --> THe type is not specified in the XMI, GPT is not wrong. 
-------------------------------------------------------------------------------------------
    public List<ManyFaa> faaOne = new ArrayList<ManyFaa>(); <>     public ManyFaa faaOne;
                                                                   public ManyFaa faaTwo;
    public List<ManyFaa> faaTwo = new ArrayList<ManyFaa>();
>>>>>>>>
The Oracle created lists of ManyFaa, while GPT created variables --> upper value in XMI is "*", should indicate list. fault of GPT.
-------------------------------------------------------------------------------------------
Second iteration? Yes.
Re execution? No.
